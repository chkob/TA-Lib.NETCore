using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace TALib.NETCore.HighPerf
{
    public enum FunctionNames
    {
        Accbands,
        Acos,
        Ad,
        Add,
        AdOsc,
        Adx,
        Adxr,
        Apo,
        Aroon,
        AroonOsc,
        Asin,
        Atan,
        Atr,
        AvgDev,
        AvgPrice,
        Bbands,
        Beta,
        Bop,
        Cci,
        Ceil,
        Cmo,
        Correl,
        Cos,
        Cosh,
        Dema,
        Div,
        Dx,
        Ema,
        Exp,
        Floor,
        HtDcPeriod,
        HtDcPhase,
        HtPhasor,
        HtSine,
        HtTrendline,
        HtTrendMode,
        Kama,
        LinearReg,
        LinearRegAngle,
        LinearRegIntercept,
        LinearRegSlope,
        Ln,
        Log10,
        Ma,
        Macd,
        MacdExt,
        MacdFix,
        Mama,
        Mavp,
        Max,
        MaxIndex,
        MedPrice,
        Mfi,
        MidPoint,
        MidPrice,
        Min,
        MinIndex,
        MinMax,
        MinMaxIndex,
        MinusDI,
        MinusDM,
        Mom,
        Mult,
        Natr,
        Obv,
        PlusDI,
        PlusDM,
        Ppo,
        Roc,
        RocP,
        RocR,
        RocR100,
        Rsi,
        Sar,
        SarExt,
        Sin,
        Sinh,
        Sma,
        Sqrt,
        StdDev,
        Stoch,
        StochF,
        StochRsi,
        Sub,
        Sum,
        T3,
        Tan,
        Tanh,
        Tema,
        TRange,
        Trima,
        Trix,
        Tsf,
        TypPrice,
        UltOsc,
        Var,
        WclPrice,
        WillR,
        Wma,
        AbandonedBaby,
        AdvanceBlock,
        BeltHold,
        Breakaway,
        ClosingMarubozu,
        ConcealBabysWall,
        CounterAttack,
        DarkCloudCover,
        Doji,
        DojiStar,
        DragonflyDoji,
        Engulfing,
        EveningDojiStar,
        EveningStar,
        GapSideSideWhite,
        GravestoneDoji,
        Hammer,
        HangingMan,
        Harami,
        HaramiCross,
        HighWave,
        Hikkake,
        HikkakeMod,
        HomingPigeon,
        Identical3Crows,
        InNeck,
        InvertedHammer,
        Kicking,
        KickingByLength,
        LadderBottom,
        LongLeggedDoji,
        LongLine,
        Marubozu,
        MatchingLow,
        MatHold,
        MorningDojiStar,
        MorningStar,
        OnNeck,
        Piercing,
        RickshawMan,
        RiseFall3Methods,
        SeparatingLines,
        ShootingStar,
        ShortLine,
        SpinningTop,
        StalledPattern,
        StickSandwich,
        Takuri,
        TasukiGap,
        ThreeBlackCrows,
        ThreeInside,
        ThreeLineStrike,
        ThreeOutside,
        ThreeStarsInSouth,
        ThreeWhiteSoldiers,
        TwoCrows,
        Thrusting,
        Tristar,
        Unique3River,
        UpsideGap2Crows,
        XSideGap3Methods,
    }

    public class Functions : IEnumerable<Function>
    {
        private const string RealType = "Real";
        private const string IntegerType = "Integer";

        private static readonly IDictionary<string, Function> FunctionDefinitions = new Dictionary<string, Function>
        {
            { FunctionNames.Accbands.ToString().ToLowerInvariant(), new Function(FunctionNames.Accbands, "Acceleration Bands", "Overlap Studies", "High|Low|Close", "Time Period", "Real Upper Band|Real Middle Band|Real Lower Band") },
            { FunctionNames.Acos.ToString().ToLowerInvariant(), new Function(FunctionNames.Acos, "Vector Trigonometric ACos", "Math Transform", RealType, string.Empty, RealType) },
            { FunctionNames.Ad.ToString().ToLowerInvariant(), new Function(FunctionNames.Ad, "Chaikin A/D Line", "Volume Indicators", "High|Low|Close|Volume", string.Empty, RealType) },
            { FunctionNames.Add.ToString().ToLowerInvariant(), new Function(FunctionNames.Add, "Vector Arithmetic Add", "Math Operators", RealType + "|" + RealType, string.Empty, RealType) },
            { FunctionNames.AdOsc.ToString().ToLowerInvariant(), new Function(FunctionNames.AdOsc, "Chaikin A/D Oscillator", "Volume Indicators", "High|Low|Close|Volume", "Fast Period|Slow Period", RealType) },
            { FunctionNames.Adx.ToString().ToLowerInvariant(), new Function(FunctionNames.Adx, "Average Directional Movement Index", "Momentum Indicators", "High|Low|Close", "Time Period", RealType) },
            { FunctionNames.Adxr.ToString().ToLowerInvariant(), new Function(FunctionNames.Adxr, "Average Directional Movement Index Rating", "Momentum Indicators", "High|Low|Close", "Time Period", RealType) },
            { FunctionNames.Apo.ToString().ToLowerInvariant(), new Function(FunctionNames.Apo, "Absolute Price Oscillator", "Momentum Indicators", RealType, "MA Type|Fast Period|Slow Period", RealType) },
            { FunctionNames.Aroon.ToString().ToLowerInvariant(), new Function(FunctionNames.Aroon, "Aroon", "Momentum Indicators", "High|Low", "Time Period", "Aroon Down|Aroon Up") },
            { FunctionNames.AroonOsc.ToString().ToLowerInvariant(), new Function(FunctionNames.AroonOsc, "Aroon Oscillator", "Momentum Indicators", "High|Low", "Time Period", RealType) },
            { FunctionNames.Asin.ToString().ToLowerInvariant(), new Function(FunctionNames.Asin, "Vector Trigonometric ASin", "Math Transform", RealType, string.Empty, RealType) },
            { FunctionNames.Atan.ToString().ToLowerInvariant(), new Function(FunctionNames.Atan, "Vector Trigonometric ATan", "Math Transform", RealType, string.Empty, RealType) },
            { FunctionNames.Atr.ToString().ToLowerInvariant(), new Function(FunctionNames.Atr, "Average True Range", "Volatility Indicators", "High|Low|Close", "Time Period", RealType) },
            { FunctionNames.AvgDev.ToString().ToLowerInvariant(), new Function(FunctionNames.AvgDev, "Average Deviation", "Price Transform", RealType, "Time Period", RealType) },
            { FunctionNames.AvgPrice.ToString().ToLowerInvariant(), new Function(FunctionNames.AvgPrice, "Average Price", "Price Transform", "Open|High|Low|Close", string.Empty, RealType) },
            { FunctionNames.Bbands.ToString().ToLowerInvariant(), new Function(FunctionNames.Bbands, "Bollinger Bands", "Overlap Studies", RealType, "MA Type|Time Period|Nb Dev Up|Nb Dev Dn", "Real Upper Band|Real Middle Band|Real Lower Band") },
            { FunctionNames.Beta.ToString().ToLowerInvariant(), new Function(FunctionNames.Beta, "Beta", "Statistic Functions", RealType + "|" + RealType, "Time Period", RealType) },
            { FunctionNames.Bop.ToString().ToLowerInvariant(), new Function(FunctionNames.Bop, "Balance of Power", "Momentum Indicators", "Open|High|Low|Close", string.Empty, RealType) },
            { FunctionNames.Cci.ToString().ToLowerInvariant(), new Function(FunctionNames.Cci, "Commodity Channel Index", "Momentum Indicators", "High|Low|Close", "Time Period", RealType) },
            { FunctionNames.Ceil.ToString().ToLowerInvariant(), new Function(FunctionNames.Ceil, "Vector Ceil", "Math Transform", RealType, string.Empty, RealType) },
            { FunctionNames.Cmo.ToString().ToLowerInvariant(), new Function(FunctionNames.Cmo, "Chande Momentum Oscillator", "Momentum Indicators", RealType, "Time Period", RealType) },
            { FunctionNames.Correl.ToString().ToLowerInvariant(), new Function(FunctionNames.Correl, "Pearson's Correlation Coefficient (r)", "Statistic Functions", RealType + "|" + RealType, "Time Period", RealType) },
            { FunctionNames.Cos.ToString().ToLowerInvariant(), new Function(FunctionNames.Cos, "Vector Trigonometric Cos", "Math Transform", RealType, string.Empty, RealType) },
            { FunctionNames.Cosh.ToString().ToLowerInvariant(), new Function(FunctionNames.Cosh, "Vector Trigonometric Cosh", "Math Transform", RealType, string.Empty, RealType) },
            { FunctionNames.Dema.ToString().ToLowerInvariant(), new Function(FunctionNames.Dema, "decimal Exponential Moving Average", "Overlap Studies", RealType, "Time Period", RealType) },
            { FunctionNames.Div.ToString().ToLowerInvariant(), new Function(FunctionNames.Div, "Vector Arithmetic Div", "Math Operators", RealType + "|" + RealType, string.Empty, RealType) },
            { FunctionNames.Dx.ToString().ToLowerInvariant(), new Function(FunctionNames.Dx, "Directional Movement Index", "Momentum Indicators", "High|Low|Close", "Time Period", RealType) },
            { FunctionNames.Ema.ToString().ToLowerInvariant(), new Function(FunctionNames.Ema, "Exponential Moving Average", "Overlap Studies", RealType, "Time Period", RealType) },
            { FunctionNames.Exp.ToString().ToLowerInvariant(), new Function(FunctionNames.Exp, "Vector Arithmetic Exp", "Math Transform", RealType, string.Empty, RealType) },
            { FunctionNames.Floor.ToString().ToLowerInvariant(), new Function(FunctionNames.Floor, "Vector Floor", "Math Transform", RealType, string.Empty, RealType) },
            { FunctionNames.HtDcPeriod.ToString().ToLowerInvariant(), new Function(FunctionNames.HtDcPeriod, "Hilbert Transform - Dominant Cycle Period", "Cycle Indicators", RealType, string.Empty, RealType) },
            { FunctionNames.HtDcPhase.ToString().ToLowerInvariant(), new Function(FunctionNames.HtDcPhase, "Hilbert Transform - Dominant Cycle Phase", "Cycle Indicators", RealType, string.Empty, RealType) },
            { FunctionNames.HtPhasor.ToString().ToLowerInvariant(), new Function(FunctionNames.HtPhasor, "Hilbert Transform - Phasor Components", "Cycle Indicators", RealType, string.Empty, "In Phase|Quadrature") },
            { FunctionNames.HtSine.ToString().ToLowerInvariant(), new Function(FunctionNames.HtSine, "Hilbert Transform - SineWave", "Cycle Indicators", RealType, string.Empty, "Sine|Lead Sine") },
            { FunctionNames.HtTrendline.ToString().ToLowerInvariant(), new Function(FunctionNames.HtTrendline, "Hilbert Transform - Instantaneous Trendline", "Overlap Studies", RealType, string.Empty, RealType) },
            { FunctionNames.HtTrendMode.ToString().ToLowerInvariant(), new Function(FunctionNames.HtTrendMode, "Hilbert Transform - Trend vs Cycle Mode", "Cycle Indicators", RealType, string.Empty, IntegerType) },
            { FunctionNames.Kama.ToString().ToLowerInvariant(), new Function(FunctionNames.Kama, "Kaufman Adaptive Moving Average", "Overlap Studies", RealType, "Time Period", RealType) },
            { FunctionNames.LinearReg.ToString().ToLowerInvariant(), new Function(FunctionNames.LinearReg, "Linear Regression", "Statistic Functions", RealType, "Time Period", RealType) },
            { FunctionNames.LinearRegAngle.ToString().ToLowerInvariant(), new Function(FunctionNames.LinearRegAngle, "Linear Regression Angle", "Statistic Functions", RealType, "Time Period", RealType) },
            { FunctionNames.LinearRegIntercept.ToString().ToLowerInvariant(), new Function(FunctionNames.LinearRegIntercept, "Linear Regression Intercept", "Statistic Functions", RealType, "Time Period", RealType) },
            { FunctionNames.LinearRegSlope.ToString().ToLowerInvariant(), new Function(FunctionNames.LinearRegSlope, "Linear Regression Slope", "Statistic Functions", RealType, "Time Period", RealType) },
            { FunctionNames.Ln.ToString().ToLowerInvariant(), new Function(FunctionNames.Ln, "Vector Log Natural", "Math Transform", RealType, string.Empty, RealType) },
            { FunctionNames.Log10.ToString().ToLowerInvariant(), new Function(FunctionNames.Log10, "Vector Log10", "Math Transform", RealType, string.Empty, RealType) },
            { FunctionNames.Ma.ToString().ToLowerInvariant(), new Function(FunctionNames.Ma, "Moving Average", "Overlap Studies", RealType, "MA Type|Time Period", RealType) },
            { FunctionNames.Macd.ToString().ToLowerInvariant(), new Function(FunctionNames.Macd, "Moving Average Convergence/Divergence", "Momentum Indicators", RealType, "Fast Period|Slow Period|Signal Period", "Macd|Macd Signal|Macd Hist") },
            { FunctionNames.MacdExt.ToString().ToLowerInvariant(), new Function(FunctionNames.MacdExt, "MACD with controllable MA type", "Momentum Indicators", RealType, "Fast MA Type|Slow MA Type|Signal MA Type|Fast Period|Slow Period|Signal Period", "Macd|Macd Signal|Macd Hist") },
            { FunctionNames.MacdFix.ToString().ToLowerInvariant(), new Function(FunctionNames.MacdFix, "Moving Average Convergence/Divergence Fix 12/26", "Momentum Indicators", RealType, "Signal Period", "Macd|Macd Signal|Macd Hist") },
            { FunctionNames.Mama.ToString().ToLowerInvariant(), new Function(FunctionNames.Mama, "MESA Adaptive Moving Average", "Overlap Studies", RealType, "Fast Limit|Slow Limit", "Mama|Fama") },
            { FunctionNames.Mavp.ToString().ToLowerInvariant(), new Function(FunctionNames.Mavp, "Moving average with variable period", "Overlap Studies", RealType + "|Periods", "Min Period|Max Period", RealType) },
            { FunctionNames.Max.ToString().ToLowerInvariant(), new Function(FunctionNames.Max, "Highest value over a specified period", "Math Operators", RealType, "Time Period", RealType) },
            { FunctionNames.MaxIndex.ToString().ToLowerInvariant(), new Function(FunctionNames.MaxIndex, "Index of highest value over a specified period", "Math Operators", RealType, "Time Period", IntegerType) },
            { FunctionNames.MedPrice.ToString().ToLowerInvariant(), new Function(FunctionNames.MedPrice, "Median Price", "Price Transform", "High|Low", string.Empty, RealType) },
            { FunctionNames.Mfi.ToString().ToLowerInvariant(), new Function(FunctionNames.Mfi, "Money Flow Index", "Momentum Indicators", "High|Low|Close|Volume", "Time Period", RealType) },
            { FunctionNames.MidPoint.ToString().ToLowerInvariant(), new Function(FunctionNames.MidPoint, "MidPoint over period", "Overlap Studies", RealType, "Time Period", RealType) },
            { FunctionNames.MidPrice.ToString().ToLowerInvariant(), new Function(FunctionNames.MidPrice, "Midpoint Price over period", "Overlap Studies", "High|Low", "Time Period", RealType) },
            { FunctionNames.Min.ToString().ToLowerInvariant(), new Function(FunctionNames.Min, "Lowest value over a specified period", "Math Operators", RealType, "Time Period", RealType) },
            { FunctionNames.MinIndex.ToString().ToLowerInvariant(), new Function(FunctionNames.MinIndex, "Index of lowest value over a specified period", "Math Operators", RealType, "Time Period", IntegerType) },
            { FunctionNames.MinMax.ToString().ToLowerInvariant(), new Function(FunctionNames.MinMax, "Lowest and highest values over a specified period", "Math Operators", RealType, "Time Period", "Min|Max") },
            { FunctionNames.MinMaxIndex.ToString().ToLowerInvariant(), new Function(FunctionNames.MinMaxIndex, "Indexes of lowest and highest values over a specified period", "Math Operators", RealType, "Time Period", "Min Idx|Max Idx") },
            { FunctionNames.MinusDI.ToString().ToLowerInvariant(), new Function(FunctionNames.MinusDI, "Minus Directional Indicator", "Momentum Indicators", "High|Low|Close", "Time Period", RealType) },
            { FunctionNames.MinusDM.ToString().ToLowerInvariant(), new Function(FunctionNames.MinusDM, "Minus Directional Movement", "Momentum Indicators", "High|Low", "Time Period", RealType) },
            { FunctionNames.Mom.ToString().ToLowerInvariant(), new Function(FunctionNames.Mom, "Momentum", "Momentum Indicators", RealType, "Time Period", RealType) },
            { FunctionNames.Mult.ToString().ToLowerInvariant(), new Function(FunctionNames.Mult, "Vector Arithmetic Mult", "Math Operators", RealType + "|" + RealType, string.Empty, RealType) },
            { FunctionNames.Natr.ToString().ToLowerInvariant(), new Function(FunctionNames.Natr, "Normalized Average True Range", "Volatility Indicators", "High|Low|Close", "Time Period", RealType) },
            { FunctionNames.Obv.ToString().ToLowerInvariant(), new Function(FunctionNames.Obv, "On Balance Volume", "Volume Indicators", RealType + "|Volume", string.Empty, RealType) },
            { FunctionNames.PlusDI.ToString().ToLowerInvariant(), new Function(FunctionNames.PlusDI, "Plus Directional Indicator", "Momentum Indicators", "High|Low|Close", "Time Period", RealType) },
            { FunctionNames.PlusDM.ToString().ToLowerInvariant(), new Function(FunctionNames.PlusDM, "Plus Directional Movement", "Momentum Indicators", "High|Low", "Time Period", RealType) },
            { FunctionNames.Ppo.ToString().ToLowerInvariant(), new Function(FunctionNames.Ppo, "Percentage Price Oscillator", "Momentum Indicators", RealType, "MA Type|Fast Period|Slow Period", RealType) },
            { FunctionNames.Roc.ToString().ToLowerInvariant(), new Function(FunctionNames.Roc, "Rate of change : ((price/prevPrice)-1)*100", "Momentum Indicators", RealType, "Time Period", RealType) },
            { FunctionNames.RocP.ToString().ToLowerInvariant(), new Function(FunctionNames.RocP, "Rate of change Percentage: (price-prevPrice)/prevPrice", "Momentum Indicators", RealType, "Time Period", RealType) },
            { FunctionNames.RocR.ToString().ToLowerInvariant(), new Function(FunctionNames.RocR, "Rate of change ratio: (price/prevPrice)", "Momentum Indicators", RealType, "Time Period", RealType) },
            { FunctionNames.RocR100.ToString().ToLowerInvariant(), new Function(FunctionNames.RocR100, "Rate of change ratio 100 scale: (price/prevPrice)*100", "Momentum Indicators", RealType, "Time Period", RealType) },
            { FunctionNames.Rsi.ToString().ToLowerInvariant(), new Function(FunctionNames.Rsi, "Relative Strength Index", "Momentum Indicators", RealType, "Time Period", RealType) },
            { FunctionNames.Sar.ToString().ToLowerInvariant(), new Function(FunctionNames.Sar, "Parabolic SAR", "Overlap Studies", "High|Low", "Acceleration|Maximum", RealType) },
            { FunctionNames.SarExt.ToString().ToLowerInvariant(), new Function(FunctionNames.SarExt, "Parabolic SAR - Extended", "Overlap Studies", "High|Low", "Start Value|Offset On Reverse|Acceleration Init Long|Acceleration Long|Acceleration Max Long|Acceleration Init Short|Acceleration Short|Acceleration Max Short", RealType) },
            { FunctionNames.Sin.ToString().ToLowerInvariant(), new Function(FunctionNames.Sin, "Vector Trigonometric Sin", "Math Transform", RealType, string.Empty, RealType) },
            { FunctionNames.Sinh.ToString().ToLowerInvariant(), new Function(FunctionNames.Sinh, "Vector Trigonometric Sinh", "Math Transform", RealType, string.Empty, RealType) },
            { FunctionNames.Sma.ToString().ToLowerInvariant(), new Function(FunctionNames.Sma, "Simple Moving Average", "Overlap Studies", RealType, "Time Period", RealType) },
            { FunctionNames.Sqrt.ToString().ToLowerInvariant(), new Function(FunctionNames.Sqrt, "Vector Square Root", "Math Transform", RealType, string.Empty, RealType) },
            { FunctionNames.StdDev.ToString().ToLowerInvariant(), new Function(FunctionNames.StdDev, "Standard Deviation", "Statistic Functions", RealType, "Time Period|Nb Dev", RealType) },
            { FunctionNames.Stoch.ToString().ToLowerInvariant(), new Function(FunctionNames.Stoch, "Stochastic", "Momentum Indicators", "High|Low|Close", "Slow K MA Type|Slow D MA Type|Fast K Period|Slow K Period|Slow D Period", "Slow K|Slow D") },
            { FunctionNames.StochF.ToString().ToLowerInvariant(), new Function(FunctionNames.StochF, "Stochastic Fast", "Momentum Indicators", "High|Low|Close", "Fast D MA Type|Fast K Period|Fast D Period", "Fast K|Fast D") },
            { FunctionNames.StochRsi.ToString().ToLowerInvariant(), new Function(FunctionNames.StochRsi, "Stochastic Relative Strength Index", "Momentum Indicators", RealType, "Fast D MA Type|Time Period|Fast K Period|Fast D Period", "Fast K|Fast D") },
            { FunctionNames.Sub.ToString().ToLowerInvariant(), new Function(FunctionNames.Sub, "Vector Arithmetic Subtraction", "Math Operators", RealType + "|" + RealType, string.Empty, RealType) },
            { FunctionNames.Sum.ToString().ToLowerInvariant(), new Function(FunctionNames.Sum, "Summation", "Math Operators", RealType, "Time Period", RealType) },
            { FunctionNames.T3.ToString().ToLowerInvariant(), new Function(FunctionNames.T3, "Triple Exponential Moving Average (T3)", "Overlap Studies", RealType, "Time Period|V Factor", RealType) },
            { FunctionNames.Tan.ToString().ToLowerInvariant(), new Function(FunctionNames.Tan, "Vector Trigonometric Tan", "Math Transform", RealType, string.Empty, RealType) },
            { FunctionNames.Tanh.ToString().ToLowerInvariant(), new Function(FunctionNames.Tanh, "Vector Trigonometric Tanh", "Math Transform", RealType, string.Empty, RealType) },
            { FunctionNames.Tema.ToString().ToLowerInvariant(), new Function(FunctionNames.Tema, "Triple Exponential Moving Average", "Overlap Studies", RealType, "Time Period", RealType) },
            { FunctionNames.TRange.ToString().ToLowerInvariant(), new Function(FunctionNames.TRange, "True Range", "Volatility Indicators", "High|Low|Close", string.Empty, RealType) },
            { FunctionNames.Trima.ToString().ToLowerInvariant(), new Function(FunctionNames.Trima, "Triangular Moving Average", "Overlap Studies", RealType, "Time Period", RealType) },
            { FunctionNames.Trix.ToString().ToLowerInvariant(), new Function(FunctionNames.Trix, "1-day Rate-Of-Change (ROC) of a Triple Smooth EMA", "Momentum Indicators", RealType, "Time Period", RealType) },
            { FunctionNames.Tsf.ToString().ToLowerInvariant(), new Function(FunctionNames.Tsf, "Time Series Forecast", "Statistic Functions", RealType, "Time Period", RealType) },
            { FunctionNames.TypPrice.ToString().ToLowerInvariant(), new Function(FunctionNames.TypPrice, "Typical Price", "Price Transform", "High|Low|Close", string.Empty, RealType) },
            { FunctionNames.UltOsc.ToString().ToLowerInvariant(), new Function(FunctionNames.UltOsc, "Ultimate Oscillator", "Momentum Indicators", "High|Low|Close", "Time Period 1|Time Period 2|Time Period 3", RealType) },
            { FunctionNames.Var.ToString().ToLowerInvariant(), new Function(FunctionNames.Var, "Variance", "Statistic Functions", RealType, "Time Period", RealType) },
            { FunctionNames.WclPrice.ToString().ToLowerInvariant(), new Function(FunctionNames.WclPrice, "Weighted Close Price", "Price Transform", "High|Low|Close", string.Empty, RealType) },
            { FunctionNames.WillR.ToString().ToLowerInvariant(), new Function(FunctionNames.WillR, "Williams' %R", "Momentum Indicators", "High|Low|Close", "Time Period", RealType) },
            { FunctionNames.Wma.ToString().ToLowerInvariant(), new Function(FunctionNames.Wma, "Weighted Moving Average", "Overlap Studies", RealType, "Time Period", RealType) },
            { FunctionNames.AbandonedBaby.ToString().ToLowerInvariant(), new Function(FunctionNames.AbandonedBaby, "Abandoned Baby", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.AdvanceBlock.ToString().ToLowerInvariant(), new Function(FunctionNames.AdvanceBlock, "Advance Block", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.BeltHold.ToString().ToLowerInvariant(), new Function(FunctionNames.BeltHold, "Belt-hold", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.Breakaway.ToString().ToLowerInvariant(), new Function(FunctionNames.Breakaway, "Breakaway", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.ClosingMarubozu.ToString().ToLowerInvariant(), new Function(FunctionNames.ClosingMarubozu, "Closing Marubozu", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.ConcealBabysWall.ToString().ToLowerInvariant(), new Function(FunctionNames.ConcealBabysWall, "Concealing Baby Swallow", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.CounterAttack.ToString().ToLowerInvariant(), new Function(FunctionNames.CounterAttack, "Counterattack", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.DarkCloudCover.ToString().ToLowerInvariant(), new Function(FunctionNames.DarkCloudCover, "Dark Cloud Cover", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.Doji.ToString().ToLowerInvariant(), new Function(FunctionNames.Doji, "Doji", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.DojiStar.ToString().ToLowerInvariant(), new Function(FunctionNames.DojiStar, "Doji Star", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.DragonflyDoji.ToString().ToLowerInvariant(), new Function(FunctionNames.DragonflyDoji, "Dragonfly Doji", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.Engulfing.ToString().ToLowerInvariant(), new Function(FunctionNames.Engulfing, "Engulfing Pattern", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.EveningDojiStar.ToString().ToLowerInvariant(), new Function(FunctionNames.EveningDojiStar, "Evening Doji Star", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.EveningStar.ToString().ToLowerInvariant(), new Function(FunctionNames.EveningStar, "Evening Star", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.GapSideSideWhite.ToString().ToLowerInvariant(), new Function(FunctionNames.GapSideSideWhite, "Up/Down-gap side-by-side white lines", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.GravestoneDoji.ToString().ToLowerInvariant(), new Function(FunctionNames.GravestoneDoji, "Gravestone Doji", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.Hammer.ToString().ToLowerInvariant(), new Function(FunctionNames.Hammer, "Hammer", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.HangingMan.ToString().ToLowerInvariant(), new Function(FunctionNames.HangingMan, "Hanging Man", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.Harami.ToString().ToLowerInvariant(), new Function(FunctionNames.Harami, "Harami Pattern", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.HaramiCross.ToString().ToLowerInvariant(), new Function(FunctionNames.HaramiCross, "Harami Cross Pattern", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.HighWave.ToString().ToLowerInvariant(), new Function(FunctionNames.HighWave, "High-Wave Candle", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.Hikkake.ToString().ToLowerInvariant(), new Function(FunctionNames.Hikkake, "Hikkake Pattern", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.HikkakeMod.ToString().ToLowerInvariant(), new Function(FunctionNames.HikkakeMod, "Modified Hikkake Pattern", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.HomingPigeon.ToString().ToLowerInvariant(), new Function(FunctionNames.HomingPigeon, "Homing Pigeon", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.Identical3Crows.ToString().ToLowerInvariant(), new Function(FunctionNames.Identical3Crows, "Identical Three Crows", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.InNeck.ToString().ToLowerInvariant(), new Function(FunctionNames.InNeck, "In-Neck Pattern", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.InvertedHammer.ToString().ToLowerInvariant(), new Function(FunctionNames.InvertedHammer, "Inverted Hammer", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.Kicking.ToString().ToLowerInvariant(), new Function(FunctionNames.Kicking, "Kicking", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.KickingByLength.ToString().ToLowerInvariant(), new Function(FunctionNames.KickingByLength, "Kicking - bull/bear determined by the longer marubozu", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.LadderBottom.ToString().ToLowerInvariant(), new Function(FunctionNames.LadderBottom, "Ladder Bottom", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.LongLeggedDoji.ToString().ToLowerInvariant(), new Function(FunctionNames.LongLeggedDoji, "Long Legged Doji", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.LongLine.ToString().ToLowerInvariant(), new Function(FunctionNames.LongLine, "Long Line Candle", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.Marubozu.ToString().ToLowerInvariant(), new Function(FunctionNames.Marubozu, "Marubozu", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.MatchingLow.ToString().ToLowerInvariant(), new Function(FunctionNames.MatchingLow, "Matching Low", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.MatHold.ToString().ToLowerInvariant(), new Function(FunctionNames.MatHold, "Mat Hold", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.MorningDojiStar.ToString().ToLowerInvariant(), new Function(FunctionNames.MorningDojiStar, "Morning Doji Star", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.MorningStar.ToString().ToLowerInvariant(), new Function(FunctionNames.MorningStar, "Morning Star", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.OnNeck.ToString().ToLowerInvariant(), new Function(FunctionNames.OnNeck, "On-Neck Pattern", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.Piercing.ToString().ToLowerInvariant(), new Function(FunctionNames.Piercing, "Piercing Pattern", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.RickshawMan.ToString().ToLowerInvariant(), new Function(FunctionNames.RickshawMan, "Rickshaw Man", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.RiseFall3Methods.ToString().ToLowerInvariant(), new Function(FunctionNames.RiseFall3Methods, "Rising/Falling Three Methods", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.SeparatingLines.ToString().ToLowerInvariant(), new Function(FunctionNames.SeparatingLines, "Separating Lines", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.ShootingStar.ToString().ToLowerInvariant(), new Function(FunctionNames.ShootingStar, "Shooting Star", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.ShortLine.ToString().ToLowerInvariant(), new Function(FunctionNames.ShortLine, "Short Line Candle", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.SpinningTop.ToString().ToLowerInvariant(), new Function(FunctionNames.SpinningTop, "Spinning Top", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.StalledPattern.ToString().ToLowerInvariant(), new Function(FunctionNames.StalledPattern, "Stalled Pattern", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.StickSandwich.ToString().ToLowerInvariant(), new Function(FunctionNames.StickSandwich, "Stick Sandwich", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.Takuri.ToString().ToLowerInvariant(), new Function(FunctionNames.Takuri, "Takuri (Dragonfly Doji with very long lower shadow)", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.TasukiGap.ToString().ToLowerInvariant(), new Function(FunctionNames.TasukiGap, "Tasuki Gap", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.ThreeBlackCrows.ToString().ToLowerInvariant(), new Function(FunctionNames.ThreeBlackCrows, "Three Black Crows", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.ThreeInside.ToString().ToLowerInvariant(), new Function(FunctionNames.ThreeInside, "Three Inside Up/Down", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.ThreeLineStrike.ToString().ToLowerInvariant(), new Function(FunctionNames.ThreeLineStrike, "Three-Line Strike", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.ThreeOutside.ToString().ToLowerInvariant(), new Function(FunctionNames.ThreeOutside, "Three Outside Up/Down", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.ThreeStarsInSouth.ToString().ToLowerInvariant(), new Function(FunctionNames.ThreeStarsInSouth, "Three Stars In The South", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.ThreeWhiteSoldiers.ToString().ToLowerInvariant(), new Function(FunctionNames.ThreeWhiteSoldiers, "Three Advancing White Soldiers", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.TwoCrows.ToString().ToLowerInvariant(), new Function(FunctionNames.TwoCrows, "Two Crows", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.Thrusting.ToString().ToLowerInvariant(), new Function(FunctionNames.Thrusting, "Thrusting Pattern", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.Tristar.ToString().ToLowerInvariant(), new Function(FunctionNames.Tristar, "Tristar Pattern", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.Unique3River.ToString().ToLowerInvariant(), new Function(FunctionNames.Unique3River, "Unique 3 River", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.UpsideGap2Crows.ToString().ToLowerInvariant(), new Function(FunctionNames.UpsideGap2Crows, "Upside Gap Two Crows", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) },
            { FunctionNames.XSideGap3Methods.ToString().ToLowerInvariant(), new Function(FunctionNames.XSideGap3Methods, "Upside/Downside Gap Three Methods", "Pattern Recognition", "Open|High|Low|Close", string.Empty, IntegerType) }
        };

        public static bool Contains(string name) => FunctionDefinitions.ContainsKey(name.ToLowerInvariant());

        public static bool TryGet(string name, out Function function) => FunctionDefinitions.TryGetValue(name.ToLowerInvariant(), out function);

        public static Function Get(string name)
        {
            if (TryGet(name, out var function))
            {
                return function;
            }
            throw new ArgumentException($"Function '{name}' not found.", name);
        }

        public IEnumerator<Function> GetEnumerator() => FunctionDefinitions.Select(p => p.Value).GetEnumerator();

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }
}
